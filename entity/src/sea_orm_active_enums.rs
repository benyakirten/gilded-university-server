//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6
use std::str::FromStr;

use sea_orm::entity::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "role")]
pub enum Role {
    #[sea_orm(string_value = "Admin")]
    Admin,
    #[sea_orm(string_value = "Guest")]
    Guest,
    #[sea_orm(string_value = "Student")]
    Student,
    #[sea_orm(string_value = "Teacher")]
    Teacher,
}

impl Role {
    pub fn meets_requirements(&self, role: &Role) -> bool {
        self.to_int() >= role.to_int()
    }

    fn to_int(&self) -> u8 {
        match self {
            Role::Admin => 3,
            Role::Teacher => 2,
            Role::Student => 1,
            Role::Guest => 0,
        }
    }

    pub fn to_str(&self) -> String {
        match self {
            Role::Admin => "Admin".to_string(),
            Role::Teacher => "Teacher".to_string(),
            Role::Student => "Student".to_string(),
            Role::Guest => "Guest".to_string(),
        }
    }
}
#[derive(Debug)]
pub struct UnexpetedError {}

impl FromStr for Role {
    type Err = UnexpetedError;
    fn from_str(role: &str) -> Result<Self, Self::Err> {
        let role = match role {
            "Admin" => Role::Admin,
            "Teacher" => Role::Teacher,
            "Student" => Role::Student,
            _ => Role::Guest,
        };
        Ok(role)
    }
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "status")]
pub enum Status {
    #[sea_orm(string_value = "Hidden")]
    Hidden,
    #[sea_orm(string_value = "Offline")]
    Offline,
    #[sea_orm(string_value = "Online")]
    Online,
}
